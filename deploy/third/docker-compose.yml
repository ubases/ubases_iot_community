version: '3.7'

services:
  nats:
    image: nats:2.10.16
    hostname: iot-nats
    container_name: nats-server
    restart: unless-stopped
    privileged: true
    command: "-c /nats/conf/js.conf"
    volumes:
      - ./nats:/nats
      - ./nats/logs:/logs
      - ./nats/tmp:/tmp
      - ./nats/storage:/storage
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      iot_network:
        ipv4_address: 172.16.0.2
  clickhouse:
    image: clickhouse/clickhouse-server:22.2.3.5
    container_name: clickhouseServer
    hostname: clickhouseServer
    restart: unless-stopped
    privileged: true
    volumes:
      - ./clickhouse/config/:/etc/clickhouse-server/
      - ./clickhouse/data/:/var/lib/clickhouse/
      - ./clickhouse/log/:/var/log/clickhouse-server/
      - ./clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/
    ports:
      - "9000:9000"
      - "8123:8123"
      #- "9001:9001"
      - "9009:9009"
    expose:
      - 8123
      - 9000
      #- 9001
      - 9009
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: iLmz8sCXjkTYuh
    networks:
      iot_network:
        ipv4_address: 172.16.0.3
  mysql:
    image: mysql:5.7.44
    #image: mysql/mysql-server:5.7.41
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    privileged: true
    restart: unless-stopped
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/conf:/etc/mysql/conf.d
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/
      - ./mysql/sql:/sql/
    user: mysql
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: iLmz8sCXjkTYuh
    ports:                              # 映射端口
      - "3306:3306"
    networks:
      iot_network:
        ipv4_address: 172.16.0.4
  redis:
    image: redis:6.2.14-alpine
    container_name: redis-server
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:
      - ./redis/data:/data
      - ./redis:/opt/redis
      - ./redis/config:/etc/redis
    ports:
      - "6379:6379"
    networks:
      iot_network:
        ipv4_address: 172.16.0.5
  haproxy:
    build: ./haproxy/
    container_name: haproxy
    restart: unless-stopped
    command: "-f /usr/local/etc/haproxy/haproxy.cfg"
    volumes:
      - ./haproxy/config:/usr/local/etc/haproxy # haproxy的配置文件路径
    ports:
      - "1885:1885"  # 端口转换
      - "1883:1883"
      - "9080:9080"
    expose:
      - 1885   # haproxy对外暴露的端口
      - 1883
      - 9080
    depends_on:
      - vernemq
    networks:
      iot_network:
        ipv4_address: 172.16.0.6
  vernemq:
    image: vernemq/vernemq:1.12.6.2
    container_name: vernemq
    restart: unless-stopped
    privileged: true
    environment:
      - DOCKER_VERNEMQ_ACCEPT_EULA=yes
    ports:
      - "18850:18850"
      - "8883:8883"
      - "44053:44053"
    volumes:
      - ./vernemq/log:/vernemq/log
      - ./vernemq/data:/vernemq/data
      - ./vernemq/etc:/vernemq/etc
    networks:
      iot_network:
        ipv4_address: 172.16.0.7
  xxl-job:
    image: xuxueli/xxl-job-admin:2.4.0
    container_name: xxl-job-admin
    restart: unless-stopped
    volumes:
      - ./xxl-job/logs:/data/applogs
    ports:
      - "8088:8088"
    environment:
      PARAMS: '
      --server.port=8088
      --server.servlet.context-path=/xxl-job-admin
      --spring.datasource.url=jdbc:mysql://mysql:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai
      --spring.datasource.username=root
      --spring.datasource.password=iLmz8sCXjkTYuh
      --spring.mail.username=1958615756@qq.com
      --spring.mail.password=Lsl18718383742
      --xxl.job.accessToken=abchd@^&#^&uUU'
    networks:
      iot_network:
        ipv4_address: 172.16.0.8
    depends_on:
      - mysql
  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: zipkin
    restart: unless-stopped
    environment:
      - TZ=Asia/Shanghai
      - LANG=en_US.UTF-8
      - STORAGE_TYPE=mem
#      - MYSQL_HOST=mysql
#      - MYSQL_TCP_PORT=3306
#      - MYSQL_DB=zipkin
#      - MYSQL_USER=root
#      - MYSQL_PASS=123456
#      - MYSQL_MAX_CONNECTIONS=100
#      - MYSQL_USE_SSL=false
    ports: # 映射端口
      - "9411:9411"
    command: --logging.level.zipkin2=DEBUG
    networks:
      iot_network:
        ipv4_address: 172.16.0.9
#  etcd0:
#    image: quay.io/coreos/etcd
#    container_name: etcd0
#    command: etcd -name etcd0 -advertise-client-urls http://0.0.0.0:2379 -listen-client-urls http://0.0.0.0:2379 -listen-peer-urls http://0.0.0.0:2380
#    ports:
#      - 2379:2379
#      - 2380:2380
#    volumes:
#      - ./etcd/data:/etcd-data
#    networks:
#      iot_network:
#        ipv4_address: 172.16.0.10
  etcd0:
    image: 'bitnami/etcd:3.5'
    restart: unless-stopped
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd0:2379
    volumes:
      - ./etcd/data:/etcd-data
    ports:
      - 2379:2379
      - 2380:2380
    networks:
      iot_network:
        ipv4_address: 172.16.0.10
  gorush:
    build: ./gorush/
    container_name: gorush
    restart: unless-stopped
    privileged: true
    ports:
      - "18021:18021"
    expose:
      - 18021
    networks:
      iot_network:
        ipv4_address: 172.16.0.11
networks:
  iot_network:
    external: true
    name: docker_iot_network
#    ipam:
#      config:
#        - subnet: 172.16.0.0/16
#        - gateway: 172.16.0.1
